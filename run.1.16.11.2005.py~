import os
import numpy as np
import time
import gc

def FindPeaks(imgvals):
    imshp = imgvals.shape
    peaks = np.zeros(0)
    xs,ys = np.zeros(0),np.zeros(0)
    g = np.where(imgvals > (0.4*imgvals.max()+0.6*imgvals.mean()))
    for i in range(0,len(g[0][:])):
    	x = g[0][i]
	y = g[1][i]
	t = imgvals[x][y]
    	sxmax = x + 20
    	if sxmax >= imshp[0]: imshp[0]-1
    	sxmin = x - 20
   	if sxmin < 0: sxmin = 0
        symax = y + 20
        if symax >= imshp[1]: symax = imshp[1]-1
        symin = y-20
        if symin < 0: symin=0
        tt = imgvals[sxmin:sxmax,symin:symax]
        if t >= tt.max(): 
            peaks,xs,ys = np.append(peaks,t),np.append(xs,x),np.append(ys,y)
    return peaks,xs,ys
    

rArr = ['18.83','27.27','35.1']


dataspace2d([1024,1024])
set_model(beta2d.b1 + const2d.C)
b1.xpos = 512
b1.ypos = 512
b1.alpha = 2.064
b1.r0 = 27.27
C.c0 = 0.004


st = time.time()
for j in range(0,1):
    b1.ampl = 3*C.c0
    r = rArr[j]
    FILE = open("/home/rumbaugh/COSMOS/analysis/peak.list.Pos_r_27.27.conv_r_" + r + ".c_0.004x3.11.28.10.2030.dat","w")
    if j > 0:
        print str(j*33) + "% done - ETA: " + str(int(((time.time()-st)/(1.0*j))*(3-j))) + " seconds for 6431"
    gc.collect()
    for i in range(0,50):
    	if ((i == 1) and (j == 0)): print "Finished first run - ETA: " + str(int((time.time()-st)*(900-100*j-1))) + " seconds"
        if (i == 50): gc.collect()
        fake()
        save_image("AtempP.fits",clobber="yes")
    	os.system('aconvolve AtempP.fits conv.tempOP.' + r + '.fits "file:/scratch/rumbaugh/ciaotesting/beta_models/betamodel.alpha_2.064.r_' + r + '.fits" edges=wrap method=fft clob+')

	convfile = "conv.tempOP." + r + ".fits"
	imcr = read_file(convfile)
	imgvals = get_piximgvals(imcr)
	peaks,ras,decs = FindPeaks(imgvals)

        sinds = np.argsort(peaks)
	speaks = peaks[sinds]
        FILE.write(str(imgvals.mean()) + " -1 -1\n" + str(imgvals.std()) + " -1 -1\n")
	for k in range(len(speaks)-1,len(speaks)-8,-1):
    	    if k >= 0: FILE.write(str(speaks[k]) + " " + str(ras[sinds[k]]) + " " + str(decs[sinds[k]]) + "\n")
    	    else: FILE.write("-1 -1 -1\n")
    FILE.close()

exit()
